from contextlib import contextmanager
import telebot, psycopg2, schedule, datetime, uuid
from datetime import datetime, timedelta
from threading import Thread
import threading
from Config import *

bot = telebot.TeleBot(BOT_TOKEN)

@contextmanager
def get_connect():
    connect = psycopg2.connect(
        dbname=DB_NANE,
        user=DB_USERNAME,
        password=DB_PASSWORD,
    )
    try:
        yield connect
    finally:
        connect.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
with get_connect() as connect:
    with connect.cursor() as c:
        c.execute("select version();")
        info_db = c.fetchone()
        print(f"{datetime.now()} | [INFO] | –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ: {info_db[0]}")

def check_telegram_id(connect, telegram_id):
    with connect.cursor() as c:
        c.execute("select * from telegram_users where telegram_id=%s;", (telegram_id,))
        return c.fetchone()

def add_new_telegram_user(connect, telegram_id, user_first_name, user_last_name, user_name):
    error_uuid = uuid.uuid1()
    with connect.cursor() as c:
        c.execute("INSERT INTO telegram_users (telegram_id, first_name, last_name, username) VALUES(%s, %s, %s, %s) RETURNING id;",(telegram_id, user_first_name, user_last_name, user_name))
        c.commit()
        new_user_id = c.fetchone()
        if not new_user_id[0]:
            print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - [ERROR {error_uuid}] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")          
        else:  
            print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - [INSERT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ, –∑–∞–ø–∏—Å—å –≤ telegram_users –ø–æ–¥ id:{new_user_id[0]} –¥–æ–±–∞–≤–ª–µ–Ω–∞")

def check_status_telegram_user(connect, telegram_id):
    with connect.cursor() as c:
        c.execute("select * from telegram_users where telegram_id=%s;", (telegram_id,))
        user = c.fetchone()
        message = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç!"
        if user[6]:
            message = (
                f"{'üîî' if user[7] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                f"{'üîî' if user[8] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤\n"
                f"{'üîî' if user[9] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –í–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            )
        reply = message
        return reply

@bot.message_handler(commands=['start'])
def start_message(message):
    telegram_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    user_name = message.from_user.username
    with get_connect() as conn:
        user = check_telegram_id(conn, telegram_id)
        check_status = check_status_telegram_user(conn, telegram_id)
        if not user:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–¥
            add_new_telegram_user(telegram_id, user_first_name, user_last_name, user_name)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
        else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–¥
            bot.send_message(message.from_user.id, f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {user[2]}!\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: {user[0]}\n{check_status}")
        

if __name__ == '__main__':
    bot.polling(none_stop=True)

# @bot.message_handler(commands=['start'])
# def start_message(message):
#     user_id = message.from_user.id
#     user_first_name = message.from_user.first_name
#     user_last_name = message.from_user.last_name
#     user_name = message.from_user.username
#     error_uuid = uuid.uuid1()
#     cursor.execute(f"select * from telegram_users where telegram_id={user_id};")
#     telegram_user = cursor.fetchone()
#     print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start")
#     if  not telegram_user:
#         bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_first_name}!\n–í—ã —Ç—É—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑!?\n–î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–µ—Å—É –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å? (–î–∞/–ù–µ—Ç)")
#         @bot.message_handler(content_types=['text'])
#         def start(message): 
#             if  message.text.lower() == '–¥–∞':
#                 cursor.execute(f"INSERT INTO telegram_users (telegram_id, first_name, last_name, username) VALUES({user_id}, '{user_first_name}', '{user_last_name}', '{user_name}') RETURNING id;")
#                 conn.commit()
#                 telegram_user_id = cursor.fetchone()
#                 cursor.execute(f"select * from telegram_users where telegram_id={user_id};")
#                 check_telegram_user_id = cursor.fetchone()
#                 if not check_telegram_user_id:
#                     bot.send_message(message.from_user.id, f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è), {user_first_name}!\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!\n"
#                                                             f"–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @DeLipFin –∏ –ø–µ—Ä–µ–¥–∞—Ç—å\n{error_uuid}")
#                     print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - [ERROR {error_uuid}] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")          
#                 else:  
#                     bot.send_message(message.from_user.id, f"–î–æ–±–∞–≤–∏–ª –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É {user_first_name}!\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: {telegram_user_id[0]}\n–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notification")
#                     print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - [INSERT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ, –∑–∞–ø–∏—Å—å –≤ telegram_users –ø–æ–¥ id:{telegram_user_id[0]} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
#                     bot.send_message(message.from_user.id, f"–°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö ")
#             elif message.text.lower() == '–Ω–µ—Ç':
#                 bot.send_message(message.from_user.id, f"–ë–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –í–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, {user_first_name}!\n–ù–æ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å \"–¥–∞\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
#                 print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
#             else:
#                 bot.send_message(message.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –î–∞/–ù–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n–õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")
#                 print(f"{datetime.now()} | [INFO] | {user_first_name} {user_last_name} id:{user_id} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª \"{message.text}\"")
#     else:
#         if  telegram_user[4] == True:
#             bot.send_message(message.from_user.id, f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {telegram_user[2]}!\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: {telegram_user[0]}\n"
#                                                     f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /notification")
#         else:
#             bot.send_message(message.from_user.id, f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {telegram_user[2]}!\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: {telegram_user[0]}\n"
#                                                     f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —É –í–∞—Å!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /notification")


# # @bot.message_handler(func=lambda _: True)
# # def message_handler(message):
# #     print(message) 

# def main():
#     # schedule.every().day.at('00:35').do(holidays)
#     # schedule.every().day.at('00:40').do(holidays)
#     # schedule.every(10).seconds.do(holidays)
#     while True:
#         schedule.run_pending()

# if __name__ == '__main__':
#     # main()
#     th1 = threading.Thread(target=main, daemon=True)
#     th1.start()
#     # th2 = threading.Thread(target=birthday_add, daemon=True)
#     # th2.start()
#     bot.polling(none_stop=True)

